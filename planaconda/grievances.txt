
- weblib.RequestBuilder().build() ?!?! ick.

- MockClerk shouldn't need a DBMAP

- DBMAP format is ugly as hell

- no quick reference tutorial for mock database (shelve)
- plus it's ugly!!!

    import arlo
    import shelve
    import storage

    shelf = shelve.open("data/planaconda.shf")
    if not shelf.get("store"):
        shelf["store"] = storage.MockStorage()
    ENG.do_on_exit(shelf.close)

    store = shelf["store"]
    clerk = arlo.Clerk(store, config.DBMAP)


- i wanted clerk to let me lazy load node.parent... 
  it has the ability to do that, but there's no support
  for it. Oh wait. It IS lazy loaded! I think. Is it?
  it's not really clear. :)

- however, I shouldn't have had to touch .private for the
  mock root... :/ Or should I?


- PlanApp is an AdminApp but doesn't use any of the old and
  crappy dispatch stuff. That probably needs to be factored
  out... In fact, the only thing it DOES use is the generic_save
  which might make more sense as another ObjectEditor or BoxEditor


- "crumbs" didn't show up from zebra. it shows up in BoxView 
  on demand, but not in zebra's scope. igh... :/


- I needed Node.ID=0 but there's no easy way to tie that 
  in with arlo. Clerk should let me get a Ghost instance
  like that, specifically for querying on None.


- the between-object navigation could all be generated 
  to begin with.. simple bullet lists of links for each
  object and whatnot... that would have saved a bunch of
  time because I wouldn't have to stop and code just a 
  little more html here and there...


- this test failed. it works if you uncomment the lines
  (and break it into two tests)... I think it's a bug in
  AdminApp._getInstance()... no big deal but I wasted
  at least 10 minutes trying to figure it out. :/

    def test_viewNode_node(self):
        n = self.c.store(Node(name="abc"))
        self.p.input["ID"] = n.ID
        m = self.p.viewNode()
        assert m["name"] == "abc"
        self.assertEquals([], m["crumbs"])
        self.assertEquals(0, len(m["comments"]))

#    def test_viewNode_comment(self):
        c = Comment()
#        n = self.c.store(Node(name="abc"))        
        n.comments << c
        self.c.store(n)
        self.p.input["ID"] = n.ID
        m = self.p.viewNode()
        self.assertEquals(1, len(m["comments"]))


- pytypes.DateTime.toDate() appears not to exist!!!
  a cyclic dependency problem?


- this failed (bug in sixthday.Node):

    def test_path(self):
        t = Node(name="top")
        n = Node(name="asdf", parent=t)
        assert n.path=="top/asdf", n.path        
